{"version":3,"sources":["services/firebase.js","modules/chats.js","helpers/databox.js","components/PublicRoute.js","components/PrivateRoute.js","containers/SignUp.js","containers/Login.js","helpers/auth.js","components/FriendItem.js","components/FriendList.js","components/FriendAdd.js","components/Message.js","components/InputBox.js","containers/Chat.js","App.js","reportWebVitals.js","modules/index.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","fire","fireauth","auth","firedatabase","firestore","database","RX_AUTHENTICATED","RX_ALL_USERS","RX_ME","RX_CONNECTED","RX_MYROOMLIST","RX_ALLROOMLIST","RX_MSGLIST","RX_REMOVE","RX_FOCUSROOM","rx_msglist","result","type","rx_focusroom","initialState","authenticated","all_users","me","all_connected","myroomlist","allroomlist","msglist","focusroom","chats","state","action","filter","todo","key","signUp","member","createUserWithEmailAndPassword","email","password","then","console","log","newPostKey","ref","push","postData","name","uid","currentUser","updates","update","catch","error","alert","message","signIn","signInWithEmailAndPassword","err","sendChat","msg","timestamp","connected","userUid","myConnectionsRef","on","snap","val","set","connection","onDisconnect","me_connected","found","element","length","PublicRoute","Component","component","rest","render","props","to","PrivateRoute","pathname","from","location","Copyright","Typography","variant","color","align","Button","Link","Date","getFullYear","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","form","width","submit","connect","classes","useState","setMember","handleOnChange","e","target","value","handleOnSubmit","a","preventDefault","Container","maxWidth","CssBaseline","className","Avatar","noValidate","onSubmit","Grid","container","item","xs","TextField","required","fullWidth","id","label","autoComplete","onChange","justifyContent","Box","mt","Login","autoFocus","login_maintain","setPersistence","Auth","Persistence","SESSION","errorCode","code","errorMessage","StyledBadge","withStyles","badge","boxShadow","background","position","top","left","height","borderRadius","animation","border","content","transform","opacity","Badge","dispatch","img","text","sub","msg_key","invisible","event","style","ListItem","button","onClick","ListItemAvatar","overlap","anchorOrigin","vertical","horizontal","alt","src","ListItemText","primary","mePassword","prompt","remove","removeRooms","root","list","overflowY","divider","title","data","uid_name","names","undefined","useEffect","ListSubheader","List","map","index","Array","isArray","emails","blue","SimpleDialog","onClose","selectedValue","open","Dialog","aria-labelledby","DialogTitle","once","snapshot","f_add","includes","React","setOpen","setSelectedValue","lBox","textAlign","rBox","appBar","bottom","listBox","listBoxItem","listBoxItemavatar","rx_remove","intervalId","useRef","scroll","current","scrollHeight","clientHeight","scrollTo","scrollToMyRef","paddingBottom","Fragment","wordBreak","dateFns","room","removeChats","InputBox","padding","setMsg","handleSumbit","now","displayName","endIcon","chat_wrap","rx_all_users","rx_me","rx_myroomlist","rx_allroomlist","rx_connected","msgs","Object","values","connectValue","response","some","Paper","elevation","sm","sectionDesktop","you","clone_data","sort","clone_allroomlist","JSON","parse","stringify","Divider","rx_authenticated","onAuthStateChanged","user","path","Chat","SignUp","signOut","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","logger","createLogger","store","createStore","composeWithDevTools","applyMiddleware","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.739d91ee.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/database\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAtKM1gMUkzx8Al9G5Y6jozCsTTezqmo4M\",\r\n  authDomain: \"dongtalk-82851.firebaseapp.com\",\r\n  databaseURL: \"https://dongtalk-82851-default-rtdb.firebaseio.com\",\r\n  projectId: \"dongtalk-82851\",\r\n  storageBucket: \"dongtalk-82851.appspot.com\",\r\n  messagingSenderId: \"63820293757\",\r\n  appId: \"1:63820293757:web:1d2960afd6d6ddf589b314\",\r\n  measurementId: \"G-E7K9VBW4D0\",\r\n};\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const fire = firebase;\r\nexport const fireauth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\nexport const firedatabase = firebase.database();\r\n\r\n//const provider = new firebase.auth.GoogleAuthProvider();\r\n// GoogleAuthProvider 클래스를 authentication 라이브러리에서 사용할 수 있도록 불러오는 코드.\r\n//provider.setCustomParameters({prompt: 'select_account'});\r\n// signIn이랑 authentication을 위해서 GoogleAuthProvider를 사용할 때마다 구글 팝업을 항상 띄우기를 원한다는 의미이다.\r\n//export const signInWithGoogle = () => auth.signInWithPopup(provider);\r\n// signInWithPopup 메소드는 여러 파라미터를 받을 수 있다. 트위터, 페이스북, 깃허브 등으로도 로그인이 필요할 수도 있으므로.\r\n// 여기에서는 google로 signIn할 것이기 때문에, 파라미터로 위에서 정의한 provider를 넣어준다.\r\n\r\n// export default firebase;\r\n// 혹시 전체 라이브러리가 필요할지도 모르기 때문에 firebase도 export 해준다.\r\n","const RX_AUTHENTICATED = \"menu/RX_AUTHENTICATED\";\r\nconst RX_ALL_USERS = \"menu/RX_ALL_USERS\";\r\nconst RX_ME = \"menu/RX_ME\";\r\nconst RX_CONNECTED = \"menu/RX_CONNECTED\";\r\nconst RX_MYROOMLIST = \"menu/RX_MYROOMLIST\";\r\nconst RX_ALLROOMLIST = \"menu/RX_ALLROOMLIST\";\r\nconst RX_MSGLIST = \"menu/RX_MSGLIST\";\r\nconst RX_REMOVE = \"menu/RX_REMOVE\";\r\nconst RX_FOCUSROOM = \"menu/RX_FOCUSROOM\";\r\n\r\nexport const rx_authenticated = (result) => ({\r\n  type: RX_AUTHENTICATED,\r\n  result,\r\n});\r\n\r\nexport const rx_all_users = (result) => ({\r\n  type: RX_ALL_USERS,\r\n  result,\r\n});\r\n\r\nexport const rx_me = (result) => ({\r\n  type: RX_ME,\r\n  result,\r\n});\r\n\r\nexport const rx_connected = (result) => ({\r\n  type: RX_CONNECTED,\r\n  result,\r\n});\r\n\r\nexport const rx_myroomlist = (result) => ({\r\n  type: RX_MYROOMLIST,\r\n  result,\r\n});\r\n\r\nexport const rx_allroomlist = (result) => ({\r\n  type: RX_ALLROOMLIST,\r\n  result,\r\n});\r\n\r\nexport const rx_msglist = (result) => ({\r\n  type: RX_MSGLIST,\r\n  result,\r\n});\r\n\r\nexport const rx_remove = (key) => ({\r\n  type: RX_REMOVE,\r\n  key,\r\n});\r\n\r\nexport const rx_focusroom = (result) => ({\r\n  type: RX_FOCUSROOM,\r\n  result,\r\n});\r\n\r\nconst initialState = {\r\n  authenticated: false,\r\n  all_users: [],\r\n  me: {},\r\n  all_connected: \"\",\r\n  myroomlist: [],\r\n  allroomlist: [],\r\n  msglist: [],\r\n  focusroom: \"\",\r\n};\r\n\r\nfunction chats(state = initialState, action) {\r\n  switch (action.type) {\r\n    case RX_AUTHENTICATED:\r\n      return {\r\n        ...state,\r\n        authenticated: action.result,\r\n      };\r\n    case RX_ALL_USERS:\r\n      return {\r\n        ...state,\r\n        all_users: action.result,\r\n      };\r\n    case RX_ME:\r\n      return {\r\n        ...state,\r\n        me: action.result,\r\n      };\r\n    case RX_CONNECTED:\r\n      return {\r\n        ...state,\r\n        all_connected: action.result,\r\n      };\r\n    case RX_MYROOMLIST:\r\n      return {\r\n        ...state,\r\n        myroomlist: action.result,\r\n      };\r\n    case RX_ALLROOMLIST:\r\n      return {\r\n        ...state,\r\n        // item.name.push(all_users.filter((data) => data.uid === item.uid))\r\n        allroomlist: action.result,\r\n      };\r\n    case RX_MSGLIST:\r\n      return {\r\n        ...state,\r\n        msglist: action.result,\r\n      };\r\n    case RX_REMOVE:\r\n      return {\r\n        ...state,\r\n        msglist: state.msglist.filter((todo) => todo.key !== action.key),\r\n      };\r\n    case RX_FOCUSROOM:\r\n      return {\r\n        ...state,\r\n        focusroom: action.result,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default chats;\r\n","import { fireauth, firedatabase } from \"../services/firebase\";\r\n\r\n//회원가입 함수\r\nexport function signUp(member) {\r\n  return fireauth\r\n    .createUserWithEmailAndPassword(member.email, member.password)\r\n    .then(() => {\r\n      console.log(\"signUp()가입성공\", member.email, member.password);\r\n      // 여기는 별도 회원 데이터 저장하기 위한 기능\r\n      var newPostKey = firedatabase.ref(\"all_users\").push().key;\r\n      var postData = {\r\n        email: member.email,\r\n        name: member.name,\r\n        password: member.password,\r\n        uid: fireauth.currentUser.uid,\r\n        key: newPostKey,\r\n      };\r\n      var updates = {};\r\n      updates[\"/all_users/\" + newPostKey] = postData;\r\n      return firedatabase.ref().update(updates);\r\n      // //여기는 별도 회원 데이터 저장하기 위한 기능\r\n    })\r\n    .catch((error) => {\r\n      alert(\r\n        error.message ===\r\n          \"The email address is already in use by another account.\" &&\r\n          \"이미 있는 아이디입니다.\"\r\n      );\r\n    });\r\n}\r\n\r\n//이메일 로그인 함수\r\nexport function signIn(member) {\r\n  return fireauth\r\n    .signInWithEmailAndPassword(member.email, member.password)\r\n    .then(() => {\r\n      //dispatch({ type: \"LOGIN_SUCCESS\" });\r\n      console.log(\"signIn()로그인성공\");\r\n    })\r\n    .catch((err) => {\r\n      //dispatch({ type: \"LOGIN_ERROR\", err });\r\n      console.log(\"signIn()실패\");\r\n    });\r\n}\r\n\r\n//로그아웃\r\nexport function logout() {\r\n  firedatabase.ref(`UsersConnection/${fireauth.currentUser.uid}`).set({\r\n    connection: false,\r\n    uid: fireauth.currentUser.uid,\r\n  });\r\n  return fireauth\r\n    .signOut()\r\n    .then(() => {\r\n      // Sign-out successful.\r\n      console.log(\"로그아웃 성공\");\r\n    })\r\n    .catch((error) => {\r\n      // An error happened.\r\n      console.log(\"로그아웃 실패\");\r\n    });\r\n}\r\n\r\n//##### 메시지 보내기 #####\r\nexport function sendChat(msg, focusroom) {\r\n  if (focusroom !== \"\") {\r\n    var newPostKey = firedatabase.ref(`msg/${focusroom}`).push().key;\r\n\r\n    var postData = {\r\n      message: msg.message,\r\n      timestamp: msg.timestamp,\r\n      uid: msg.uid,\r\n      key: newPostKey,\r\n      name: msg.name,\r\n    };\r\n\r\n    var updates = {};\r\n    updates[`msg/${focusroom}/${newPostKey}`] = postData;\r\n    return firedatabase.ref().update(updates);\r\n  } else {\r\n    alert(\"방을 선택해주세요\");\r\n  }\r\n} //sendChat\r\n\r\n//##### 메시지 삭제 #####\r\nexport const removeChats = (room, key, rx_remove) => {\r\n  firedatabase.ref(`msg/${room}/${key}`).remove();\r\n  rx_remove(key);\r\n  console.log(\"메롱\", room, key);\r\n}; //removeChats\r\n\r\nexport const removeRooms = (key, me, rx_focusroom, rx_msglist) => {\r\n  var mePassword = prompt(\"본인의 비밀번호를 입력하세요\");\r\n  if (me.password === mePassword) {\r\n    firedatabase.ref(`room/${key}`).remove();\r\n    firedatabase.ref(`msg/${key}`).remove();\r\n    rx_focusroom(\"\");\r\n    rx_msglist(\"\");\r\n    alert(\"삭제가 완료되었습니다.\");\r\n  } else {\r\n    alert(\"비밀번호가 틀려서 삭제 불가합니다\");\r\n  }\r\n};\r\n\r\n//##########################################################\r\n//########### 실시간 접속여부 관련된 함수들 ################\r\n//##########################################################\r\nexport function connected(authenticated) {\r\n  if (authenticated === true) {\r\n    var userUid = fireauth.currentUser.uid;\r\n    var myConnectionsRef = firedatabase.ref(`UsersConnection/${userUid}`);\r\n    var connectedRef = firedatabase.ref(\".info/connected\");\r\n    connectedRef.on(\"value\", (snap) => {\r\n      if (snap.val() === true) {\r\n        console.log(\"connected\");\r\n        myConnectionsRef.set({\r\n          connection: true,\r\n          uid: userUid,\r\n        });\r\n      } else {\r\n        console.log(\"not connected\");\r\n        myConnectionsRef.set({\r\n          connection: false,\r\n          uid: userUid,\r\n        });\r\n      }\r\n    });\r\n    myConnectionsRef.onDisconnect().set({ connection: false, uid: userUid });\r\n  }\r\n}\r\n\r\nexport function connectValue(rx_connected) {\r\n  //firebase 에서 connect 안의 데이터전부를 불러와서 리덕스(rx_connected)에 넣어주기\r\n  // console.log(\"fireauth.currentUser.uid\", fireauth.currentUser.uid);\r\n  firedatabase.ref(`UsersConnection`).on(\"value\", (snapshot) => {\r\n    console.log(\"sfajklas\", Object.values(snapshot.val()));\r\n    rx_connected(Object.values(snapshot.val()));\r\n  });\r\n}\r\n\r\nexport function me_connected(all_connected, uid) {\r\n  //실제 화면단 포문 도는곳에\r\n  //all_connected:리덕스의 all_connected 를 넣어주고\r\n  //uid:리덕의 all_users가 포문 돌면서 하나하나 접근할때 있는 uid값\r\n  if (all_connected !== \"\") {\r\n    // console.log(\"######################################\");\r\n    // console.log(\"all_connected\", all_connected);\r\n    // console.log(\"uid\", uid);\r\n    const found = all_connected.filter((element) => element.uid === uid);\r\n    // console.log(\r\n    //   \"foundfoundfoundfoundfoundfoundfoundfoundfoundfoundfoundfound\",\r\n    //   found\r\n    // );\r\n    return found.length > 0 && found[0].connection;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\n\r\nfunction PublicRoute({ component: Component, authenticated, ...rest }) {\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) =>\r\n        authenticated === false ? (\r\n          <Component {...props} />\r\n        ) : (\r\n          <Redirect to=\"/chat\" />\r\n        )\r\n      }\r\n    />\r\n  );\r\n}\r\n\r\nexport default PublicRoute;","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\n\r\nfunction PrivateRoute({ component: Component, authenticated, ...rest }) {\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) =>\r\n        authenticated === true ? (\r\n          <Component {...props} />\r\n        ) : (\r\n          <Redirect\r\n            to={{ pathname: \"/login\", state: { from: props.location } }}\r\n          />\r\n        )\r\n      }\r\n    />\r\n  );\r\n}\r\n\r\nexport default PrivateRoute;","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { signUp } from \"../helpers/databox\";\r\n// import { signUp, all_users } from \"../helpers/databox\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport {\r\n  Avatar,\r\n  Button,\r\n  CssBaseline,\r\n  TextField,\r\n  Grid,\r\n  Box,\r\n  Typography,\r\n  Container,\r\n} from \"@material-ui/core\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\n\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {\"Copyright © \"}\r\n      <Button component={Link} to=\"https://material-ui.com/\">\r\n        Your Website\r\n      </Button>{\" \"}\r\n      {new Date().getFullYear()}\r\n      {\".\"}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nfunction SignUp({ me }) {\r\n  const classes = useStyles();\r\n  const [member, setMember] = useState({\r\n    email: \"\",\r\n    name: \"\",\r\n    password: \"\",\r\n  });\r\n\r\n  const handleOnChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setMember({ ...member, [name]: value });\r\n  };\r\n\r\n  const handleOnSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (member.email !== \"\" && member.password !== \"\" && member.name !== \"\") {\r\n      //connectCheck(me, false);\r\n      signUp(member);\r\n\r\n      // signUp(member, all_users);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          회원 가입\r\n        </Typography>\r\n        <form className={classes.form} noValidate onSubmit={handleOnSubmit}>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"email\"\r\n                label=\"Email Address\"\r\n                name=\"email\"\r\n                autoComplete=\"email\"\r\n                value={member.email}\r\n                onChange={handleOnChange}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"name\"\r\n                label=\"name\"\r\n                name=\"name\"\r\n                autoComplete=\"name\"\r\n                value={member.name}\r\n                onChange={handleOnChange}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n                value={member.password}\r\n                onChange={handleOnChange}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n          >\r\n            가입하기\r\n          </Button>\r\n          <Grid container justifyContent=\"flex-end\">\r\n            <Grid item>\r\n              이미 회원이신가?{\" \"}\r\n              <Button component={Link} to=\"/login\">\r\n                로그인\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </div>\r\n      <Box mt={5}>\r\n        <Copyright />\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  authenticated: state.chats.authenticated,\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(SignUp);\r\n","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { signIn } from \"../helpers/databox\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\n\r\nimport {\r\n  Avatar,\r\n  Button,\r\n  TextField,\r\n  Grid,\r\n  Box,\r\n  Typography,\r\n  CssBaseline,\r\n  Container,\r\n} from \"@material-ui/core\";\r\n\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {\"Copyright © \"}\r\n      <Button component={Link} to=\"https://material-ui.com/\">\r\n        Your Website\r\n      </Button>{\" \"}\r\n      {new Date().getFullYear()}\r\n      {\".\"}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nfunction Login({ me }) {\r\n  const classes = useStyles();\r\n  const [member, setMember] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n\r\n  const handleOnChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setMember({ ...member, [name]: value });\r\n  };\r\n\r\n  const handleOnSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (member.email !== \"\" && member.password !== \"\") {\r\n      signIn(member);\r\n    }\r\n  };\r\n\r\n  // const handleGoogleSignIn = async () => {\r\n  //   try {\r\n  //     await signInWithGoogle();\r\n  //   } catch (error) {\r\n  //     console.log(error);\r\n  //   }\r\n  // };\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          로그인\r\n        </Typography>\r\n        <form className={classes.form} onSubmit={handleOnSubmit} noValidate>\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            id=\"email\"\r\n            label=\"이메일을 입력하세요.\"\r\n            name=\"email\"\r\n            autoComplete=\"email\"\r\n            autoFocus\r\n            value={member.email}\r\n            onChange={handleOnChange}\r\n          />\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            name=\"password\"\r\n            label=\"Password\"\r\n            type=\"password\"\r\n            id=\"password\"\r\n            autoComplete=\"current-password\"\r\n            value={member.password}\r\n            onChange={handleOnChange}\r\n          />\r\n\r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n          >\r\n            Sign In\r\n          </Button>\r\n          {/* <Button\r\n            type=\"button\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={handleGoogleSignIn}\r\n            className={classes.submit}\r\n          >\r\n            구글 로그인\r\n          </Button> */}\r\n          <Grid container>\r\n            <Grid item xs>\r\n              {/* <Link href=\"#\" variant=\"body2\">\r\n                Forgot password?\r\n              </Link> */}\r\n            </Grid>\r\n            <Grid item>\r\n              <Button component={Link} to=\"/signup\">\r\n                {\"회원가입\"}\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </div>\r\n      <Box mt={8}>\r\n        <Copyright />\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import { fireauth, firedatabase, fire } from \"../services/firebase\";\r\n\r\n/* 로그인 유지 (브라우져 닫으면 로그인 유지 풀림) */\r\nexport function login_maintain(member) {\r\n    console.log('member',member);\r\n  fireauth\r\n    .setPersistence(fire.auth.Auth.Persistence.SESSION)\r\n    .then(() => {\r\n      //로그인 유지 중\r\n      console.log(\"로그인 유지 중\");\r\n      return fireauth.signInWithEmailAndPassword(member.email, member.password);\r\n    })\r\n    .catch((error) => {\r\n      // Handle Errors here.\r\n      console.log(\"로그인 유지 실패\");\r\n\r\n      var errorCode = error.code;\r\n      var errorMessage = error.message;\r\n      console.log(\"errorCode\", errorCode);\r\n      console.log(\"errorMessage\", errorMessage);\r\n    });\r\n}\r\n\r\n//구글 로그인 기능\r\nexport function signInWithGoogle() {\r\n  const provider = new fire.auth.GoogleAuthProvider();\r\n  // provider.setCustomParameters({ prompt: 'select_account' });\r\n  return fireauth.signInWithPopup(provider);\r\n}\r\n\r\n//로그아웃\r\nexport function logout() {\r\n  return fireauth\r\n    .signOut()\r\n    .then(() => {\r\n      // Sign-out successful.\r\n      console.log(\"로그아웃 성공\");\r\n    })\r\n    .catch((error) => {\r\n      // An error happened.\r\n      console.log(\"로그아웃 실패\");\r\n    });\r\n}\r\n\r\n//회원가입 함수\r\nexport function signUp(member, all_users) {\r\n  return fireauth\r\n    .createUserWithEmailAndPassword(member.email, member.password)\r\n    .then(() => {\r\n      console.log(\"signUp()가입성공\", member.email, member.password);\r\n      all_users(member);\r\n    })\r\n    .catch((error) => {\r\n      alert(\r\n        error.message ===\r\n          \"The email address is already in use by another account.\" &&\r\n          \"이미 있는 아이디입니다.\"\r\n      );\r\n    });\r\n}\r\n\r\n//전체 회원 불러오기가 안되서 따로 회원 관리하기 위한용도로 만든 회원데이터\r\nexport function all_users(member) {\r\n  return firedatabase\r\n    .ref(\"all_users\")\r\n    .push({\r\n      email: member.email,\r\n      name: member.name,\r\n      password: member.password,\r\n      uid: fireauth.currentUser.uid,\r\n    })\r\n    .then(() => {\r\n      console.log(\r\n        \"all_users()데이터 추가 완료\",\r\n        member.email,\r\n        member.name,\r\n        member.password,\r\n        fireauth.currentUser.uid\r\n      );\r\n    })\r\n    .catch((error) => {\r\n      console.log(\"all_users()실패\");\r\n    });\r\n}\r\n","import React from \"react\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport { removeRooms } from \"../helpers/databox\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { rx_focusroom, rx_msglist } from \"../modules/chats\";\r\nimport {\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemAvatar,\r\n  Avatar,\r\n  Button,\r\n} from \"@material-ui/core\";\r\n\r\nconst StyledBadge = withStyles((theme) => ({\r\n  badge: {\r\n    backgroundColor: \"#44b700\",\r\n    color: \"#44b700\",\r\n    boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\r\n    \"&::after\": {\r\n      position: \"absolute\",\r\n      top: 0,\r\n      left: 0,\r\n      width: \"100%\",\r\n      height: \"100%\",\r\n      borderRadius: \"50%\",\r\n      animation: \"$ripple 1.2s infinite ease-in-out\",\r\n      border: \"1px solid currentColor\",\r\n      content: '\"\"',\r\n    },\r\n  },\r\n  \"@keyframes ripple\": {\r\n    \"0%\": {\r\n      transform: \"scale(.8)\",\r\n      opacity: 1,\r\n    },\r\n    \"100%\": {\r\n      transform: \"scale(2.4)\",\r\n      opacity: 0,\r\n    },\r\n  },\r\n}))(Badge);\r\n\r\nconst FriendItem = ({\r\n  img,\r\n  text,\r\n  sub,\r\n  uid,\r\n  msg_key,\r\n  me,\r\n  invisible,\r\n  event,\r\n  rx_focusroom,\r\n  rx_msglist,\r\n}) => {\r\n  return (\r\n    <li style={{ display: msg_key ? \"flex\" : \"block\" }}>\r\n      <ListItem button onClick={() => (msg_key ? event(msg_key) : event(uid))}>\r\n        <ListItemAvatar>\r\n          <StyledBadge\r\n            invisible={invisible}\r\n            overlap=\"circular\"\r\n            anchorOrigin={{\r\n              vertical: \"bottom\",\r\n              horizontal: \"right\",\r\n            }}\r\n            variant=\"dot\"\r\n          >\r\n            <Avatar alt=\"Remy Sharp\" src={img} />\r\n          </StyledBadge>\r\n\r\n          {/* <Avatar>\r\n                  <BeachAccessIcon />\r\n                </Avatar> */}\r\n        </ListItemAvatar>\r\n        <ListItemText primary={text} secondary={sub} />\r\n      </ListItem>\r\n      {msg_key && (\r\n        <Button\r\n          onClick={() => removeRooms(msg_key, me, rx_focusroom, rx_msglist)}\r\n        >\r\n          삭제\r\n        </Button>\r\n      )}\r\n    </li>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  rx_focusroom: (val) => {\r\n    dispatch(rx_focusroom(val));\r\n  },\r\n  rx_msglist: (val) => {\r\n    dispatch(rx_msglist(val));\r\n  },\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(FriendItem);\r\n","import React, { useEffect } from \"react\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport ListSubheader from \"@material-ui/core/ListSubheader\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport FriendItem from \"./FriendItem\";\r\n\r\nimport { Box, List } from \"@material-ui/core\";\r\n\r\nimport { me_connected } from \"../helpers/databox\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {},\r\n  list: {\r\n    height: \"240px\",\r\n    overflowY: \"scroll\",\r\n  },\r\n  divider: {\r\n    // margin: '20px 0',\r\n  },\r\n}));\r\n\r\nconst FriendList = ({ title, data, event, all_users, all_connected, me }) => {\r\n  const classes = useStyles();\r\n\r\n  function uid_name(names) {\r\n    return (\r\n      names !== undefined &&\r\n      all_users.length > 0 &&\r\n      all_users.filter((data) => data.uid === names)[0].name\r\n    );\r\n  }\r\n\r\n  useEffect(() => {\r\n    console.log(\"[표시]FriendList.js\");\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  return (\r\n    <Box className={classes.root}>\r\n      <ListSubheader>{title}</ListSubheader>\r\n\r\n      <List className={classes.list}>\r\n        {data.length > 0 ? (\r\n          data.map((data, index) => (\r\n            <FriendItem\r\n              key={index}\r\n              invisible={!me_connected(all_connected, data.uid)}\r\n              img=\"https://material-ui.com/static/images/avatar/1.jpg\"\r\n              text={\r\n                Array.isArray(data.uid)\r\n                  ? data.uid.map((item, index) =>\r\n                      index > 0 ? `/${uid_name(item)}` : uid_name(item)\r\n                    )\r\n                  : uid_name(data.uid)\r\n              }\r\n              sub={data.email === undefined ? \"1:1 대화방\" : data.email}\r\n              uid={data.uid}\r\n              msg_key={data.msg_key}\r\n              me={me}\r\n              event={event}\r\n            />\r\n          ))\r\n        ) : (\r\n          <li>리스트가없습니다.</li>\r\n        )}\r\n      </List>\r\n\r\n      {/* <List className={classes.list}>\r\n            <FriendItem img=\"https://material-ui.com/static/images/avatar/1.jpg\" text=\"김동현\" sub=\"dongdong@stunitas.com\" />\r\n            <FriendItem img=\"https://material-ui.com/static/images/avatar/1.jpg\" text=\"김동현\" sub=\"dongdong@stunitas.com\" />\r\n            <FriendItem img=\"https://material-ui.com/static/images/avatar/1.jpg\" text=\"김동현\" sub=\"dongdong@stunitas.com\" />\r\n            <FriendItem img=\"https://material-ui.com/static/images/avatar/1.jpg\" text=\"김동현\" sub=\"dongdong@stunitas.com\" />\r\n          </List>\r\n          \r\n          <Divider className={classes.divider} />\r\n          <ListSubheader>나의 방 리스트</ListSubheader>\r\n          <List className={classes.list}>\r\n            <FriendItem img=\"https://material-ui.com/static/images/avatar/1.jpg\" text=\"김동현/박금주\" sub=\"1:1 대화방\" />\r\n            <FriendItem img=\"https://material-ui.com/static/images/avatar/1.jpg\" text=\"김동현/박금주\" sub=\"1:1 대화방\" />\r\n            <FriendItem img=\"https://material-ui.com/static/images/avatar/1.jpg\" text=\"김동현/박금주\" sub=\"1:1 대화방\" />\r\n            <FriendItem img=\"https://material-ui.com/static/images/avatar/1.jpg\" text=\"김동현/박금주\" sub=\"1:1 대화방\" />\r\n          </List> */}\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  all_users: state.chats.all_users,\r\n  all_connected: state.chats.all_connected,\r\n  me: state.chats.me[0],\r\n});\r\n\r\n// const mapDispatchToProps = (dispatch) => ({\r\n//   rx_focusroom: (val) => {\r\n//     dispatch(rx_focusroom(val));\r\n//   },\r\n// });\r\n\r\nexport default connect(mapStateToProps, null)(FriendList);\r\n","import React from \"react\";\r\n// import PropTypes from \"prop-types\";\r\nimport { firedatabase } from \"../services/firebase\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport PersonIcon from \"@material-ui/icons/Person\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { blue } from \"@material-ui/core/colors\";\r\n\r\nconst emails = [\"username@gmail.com\", \"user02@gmail.com\"];\r\nconst useStyles = makeStyles({\r\n  avatar: {\r\n    backgroundColor: blue[100],\r\n    color: blue[600],\r\n  },\r\n});\r\n\r\nfunction SimpleDialog(props) {\r\n  const classes = useStyles();\r\n  const { onClose, selectedValue, open, data, focusroom } = props;\r\n\r\n  const handleClose = () => {\r\n    onClose(selectedValue);\r\n    console.log(\"까르르르궁\", data);\r\n  };\r\n\r\n  const handleListItemClick = (uid) => {\r\n    firedatabase.ref(`room/${focusroom}/uid`).once('value').then((snapshot) => {\r\n      const f_add = snapshot.val();\r\n  \r\n      if (!f_add.includes(uid)) {\r\n        //중복 친구가 없는경우 추가\r\n        f_add.push(uid);\r\n        firedatabase.ref(`room/${focusroom}`)\r\n          .update({\r\n            uid:f_add\r\n          })\r\n          .then(() => {\r\n            console.log('친추 완료', f_add);\r\n          })\r\n          .catch((error) => {\r\n            console.log('친추 실패');\r\n          });\r\n      } else {\r\n        //중복 친구가 있는경우 알럿 노출\r\n        alert('이미 추가된 친구입니다.');\r\n      };\r\n    });\r\n    onClose(false);\r\n  };\r\n  \r\n  console.log(\"까르르르궁\", data);\r\n  return (\r\n    <Dialog\r\n      onClose={handleClose}\r\n      aria-labelledby=\"simple-dialog-title\"\r\n      open={open}\r\n    >\r\n      <DialogTitle id=\"simple-dialog-title\">Set backup account</DialogTitle>\r\n      <List>\r\n        {data.length > 0 ? (\r\n          data.map((item, index) => (\r\n            <ListItem\r\n              button\r\n              onClick={() => handleListItemClick(item.uid)}\r\n              key={index}\r\n            >\r\n              <ListItemAvatar>\r\n                <Avatar className={classes.avatar}>\r\n                  <PersonIcon />\r\n                </Avatar>\r\n              </ListItemAvatar>\r\n              <ListItemText primary={item.email} />\r\n            </ListItem>\r\n          ))\r\n        ) : (\r\n          <li>리스트가없습니다.</li>\r\n        )}\r\n      </List>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\n// SimpleDialog.propTypes = {\r\n//   onClose: PropTypes.func.isRequired,\r\n//   open: PropTypes.bool.isRequired,\r\n//   selectedValue: PropTypes.string.isRequired,\r\n// };\r\n\r\nconst FriendAdd = ({ all_users,focusroom }) => {\r\n  const [open, setOpen] = React.useState(false);\r\n  const [selectedValue, setSelectedValue] = React.useState(emails[1]);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = (value) => {\r\n    setOpen(false);\r\n    setSelectedValue(value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n        친구추가\r\n      </Button>\r\n      <SimpleDialog\r\n        data={all_users}\r\n        focusroom={focusroom}\r\n        selectedValue={selectedValue}\r\n        open={open}\r\n        onClose={handleClose}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  all_users: state.chats.all_users,\r\n  // myroomlist: state.chats.myroomlist,\r\n  // allroomlist: state.chats.allroomlist,\r\n  // me: state.chats.me[0],\r\n  focusroom: state.chats.focusroom,\r\n});\r\n\r\n//   const mapDispatchToProps = (dispatch) => ({\r\n//     rx_all_users: (val) => {\r\n//       dispatch(rx_all_users(val));\r\n//     },\r\n//     rx_me: (val) => {\r\n//       dispatch(rx_me(val));\r\n//     },\r\n//     rx_myroomlist: (val) => {\r\n//       dispatch(rx_myroomlist(val));\r\n//     },\r\n//     rx_allroomlist: (val) => {\r\n//       dispatch(rx_allroomlist(val));\r\n//     },\r\n//     rx_focusroom: (val) => {\r\n//       dispatch(rx_focusroom(val));\r\n//     },\r\n//     rx_msglist: (val) => {\r\n//       dispatch(rx_msglist(val));\r\n//     },\r\n//   });\r\n\r\nexport default connect(mapStateToProps, null)(FriendAdd);\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { rx_remove } from \"../modules/chats\";\r\nimport { fireauth } from \"../services/firebase\";\r\n\r\nimport * as dateFns from \"date-fns\";\r\nimport { removeChats } from \"../helpers/databox\";\r\nimport ListSubheader from \"@material-ui/core/ListSubheader\";\r\n\r\nimport {\r\n  Box,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemAvatar,\r\n  Avatar,\r\n  Typography,\r\n  Button,\r\n} from \"@material-ui/core\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport FriendAdd from \"./FriendAdd\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  lBox: {\r\n    flexDirection: \"row-reverse\",\r\n    display: \"flex\",\r\n    textAlign: \"right\",\r\n  },\r\n  rBox: {\r\n    flexDirection: \"row-reverse\",\r\n    display: \"flex\",\r\n    textAlign: \"right\",\r\n  },\r\n  appBar: {\r\n    top: \"auto\",\r\n    bottom: 0,\r\n    left: 0,\r\n    width: \"100%\",\r\n    \"& input,& button\": {\r\n      width: \"100%\",\r\n      height: \"50px\",\r\n    },\r\n  },\r\n\r\n  listBox: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n  listBoxItem: {},\r\n  listBoxItemavatar: {\r\n    display: \"flex\",\r\n  },\r\n}));\r\n\r\nconst Message = ({ focusroom, rx_remove, msglist }) => {\r\n  const classes = useStyles();\r\n  console.log(\"Message-focusroom\", focusroom);\r\n  const intervalId = useRef(null);\r\n\r\n\r\n\r\n\r\nfunction scrollToMyRef (){\r\n    const scroll =\r\n      intervalId.current.scrollHeight -\r\n      intervalId.current.clientHeight;\r\n    intervalId.current.scrollTo(0, scroll);\r\n  };\r\n\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    console.log(\"[표시]Message.js\");\r\n    scrollToMyRef();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [msglist, focusroom]);\r\n\r\n  return (\r\n    <Box style={{ height: \"577px\", overflowY: \"scroll\", paddingBottom: \"15%\" }} ref={intervalId}>\r\n      <ListSubheader>\r\n        하하하\r\n        {focusroom !== \"\" &&\r\n          <FriendAdd />\r\n        }\r\n      </ListSubheader>\r\n      <List className={classes.listBox}>\r\n        {msglist.length > 0 ? (\r\n          msglist.map((data, index) => (\r\n            <ListItem key={index} className={classes.listBoxItem}>\r\n              <ListItemAvatar\r\n                className={classes.listBoxItemavatar}\r\n                style={{\r\n                  justifyContent: false ? \"flex-end\" : \"flex-start\",\r\n                }}\r\n              >\r\n                <Avatar alt=\"Remy Sharp\" src=\"/static/images/avatar/1.jpg\" />\r\n              </ListItemAvatar>\r\n\r\n              <ListItemText\r\n                primary={data.name}\r\n                secondary={\r\n                  <React.Fragment>\r\n                    <Typography\r\n                      component=\"span\"\r\n                      variant=\"body2\"\r\n                      color=\"textPrimary\"\r\n                      style={{ wordBreak: \"break-all\" }}\r\n                    >\r\n                      {data.message}\r\n                    </Typography>\r\n                    <br />\r\n                    {dateFns.format(data.timestamp, \"yyyy-MM-dd-HH-mm-ss\")}\r\n                  </React.Fragment>\r\n                }\r\n              />\r\n              <Button\r\n                  style={{\r\n                    display:\r\n                      fireauth.currentUser.uid !== data.uid\r\n                        ? \"none\"\r\n                        : \"inline-flex\",\r\n                  }}\r\n                onClick={() => removeChats(focusroom, data.key, rx_remove)}\r\n              >\r\n                삭제\r\n              </Button>\r\n            </ListItem>\r\n          ))\r\n        ) : (\r\n          <li>리스트가없습니다.</li>\r\n        )}\r\n      </List>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  focusroom: state.chats.focusroom,\r\n  msglist: state.chats.msglist,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  rx_remove: (val) => {\r\n    dispatch(rx_remove(val));\r\n  },\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Message);\r\n","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { fireauth } from \"../services/firebase\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Box, Button } from \"@material-ui/core\";\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport { sendChat } from \"../helpers/databox\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  InputBox: {\r\n    display: \"flex\",\r\n    backgroundColor: \"#fff\",\r\n    position: \"absolute\",\r\n    bottom: \"0\",\r\n    width: \"93%\",\r\n    margin: \"2%\",\r\n    padding: \"2%\",\r\n    boxShadow: \"1px 1px 5px #a0a0a0\",\r\n    borderRadius: \"5px\",\r\n    justifyContent: \"space-between\",\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nconst InputBox = ({ focusroom, me }) => {\r\n  const classes = useStyles();\r\n\r\n  const [msg, setMsg] = useState(\"\");\r\n\r\n  const handleOnChange = (e) => {\r\n    setMsg(e.target.value);\r\n  };\r\n\r\n  const handleSumbit = async (e) => {\r\n    e.preventDefault();\r\n    setMsg(\"\");\r\n    sendChat(\r\n      {\r\n        message: msg,\r\n        timestamp: Date.now(),\r\n        uid: fireauth.currentUser.uid,\r\n        name:\r\n          fireauth.currentUser.displayName === null\r\n            ? me.name\r\n            : fireauth.currentUser.displayName,\r\n      },\r\n      focusroom\r\n    );\r\n\r\n    console.log(      {\r\n        message: msg,\r\n        timestamp: Date.now(),\r\n        uid: fireauth.currentUser.uid,\r\n        name:\r\n          fireauth.currentUser.displayName === null\r\n            ? me.name\r\n            : fireauth.currentUser.displayName,\r\n      },\r\n      focusroom);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSumbit}>\r\n      <Box className={classes.InputBox}>\r\n        <TextField\r\n          id=\"outlined-basic\"\r\n          label=\"메시지\"\r\n          value={msg}\r\n          onChange={handleOnChange}\r\n          style={{ width: \"100%\" }}\r\n        />\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          type=\"submit\"\r\n          className={classes.button}\r\n          endIcon={<SendIcon />}\r\n        >\r\n          Send\r\n        </Button>\r\n      </Box>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  focusroom: state.chats.focusroom,\r\n  me: state.chats.me[0],\r\n});\r\n\r\n// const mapDispatchToProps = (dispatch) => ({\r\n//   rx_msglist: (val) => {\r\n//     dispatch(rx_msglist(val));\r\n//   },\r\n// });\r\n\r\nexport default connect(mapStateToProps, null)(InputBox);","import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { fireauth, firedatabase } from \"../services/firebase\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  rx_all_users,\r\n  rx_me,\r\n  rx_myroomlist,\r\n  rx_allroomlist,\r\n  rx_focusroom,\r\n  rx_msglist,\r\n  rx_connected\r\n} from \"../modules/chats\";\r\n\r\nimport {\r\n  CssBaseline,\r\n  Grid,\r\n  Container,\r\n  Paper,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\n\r\nimport { connectValue } from \"../helpers/databox\";\r\nimport { login_maintain } from \"../helpers/auth\";\r\n\r\n\r\nimport FriendList from \"../components/FriendList\";\r\nimport Message from \"../components/Message\";\r\nimport InputBox from \"../components/InputBox\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    //height:'450px'\r\n  },\r\n  chat_wrap: {\r\n    width: \"100%\",\r\n    backgroundColor: theme.palette.background.paper,\r\n    height: \"577px\",\r\n  },\r\n}));\r\n\r\nconst Chat = ({\r\n  rx_all_users,\r\n  all_users,\r\n  rx_me,\r\n  me,\r\n  rx_myroomlist,\r\n  myroomlist,\r\n  rx_allroomlist,\r\n  allroomlist,\r\n  rx_focusroom,\r\n  focusroom,\r\n  rx_msglist,\r\n  rx_connected,\r\n}) => {\r\n  const classes = useStyles();\r\n  const [msgs, setMsg] = useState([]);\r\n\r\n  const handleFriend = (you) => {\r\n    const data = [me.uid, you];\r\n    const clone_data = [me.uid, you].sort();\r\n    console.log(\"handleFriend\", data[0], data[1]);\r\n\r\n    console.log(allroomlist);\r\n    let clone_allroomlist = JSON.parse(JSON.stringify(allroomlist));\r\n    clone_allroomlist = clone_allroomlist.some(\r\n      (element) =>\r\n        JSON.stringify(element.uid.sort()) === JSON.stringify(clone_data)\r\n    );\r\n\r\n    if (!clone_allroomlist) {\r\n      var newPostKey = firedatabase.ref(\"room\").push().key;\r\n      var postData = {\r\n        uid: [me.uid, you],\r\n        name: [],\r\n        msg_key: newPostKey,\r\n      };\r\n      var updates = {};\r\n      updates[\"/room/\" + newPostKey] = postData;\r\n      return firedatabase.ref().update(updates);\r\n    } else {\r\n      alert(\"이미 방이 존재합니다.\");\r\n    }\r\n  };\r\n\r\n  const handleRoom = (msg_key) => {\r\n    rx_focusroom(msg_key);\r\n    //roomCheck(all_users, me, you, rx_focusroom, rx_msglist);\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(\"[표시]Chat.js\");\r\n\r\n    connectValue(rx_connected);\r\n\r\n    firedatabase.ref(\"all_users\").on(\"value\", (snapshot) => {\r\n      let response = Object.values(snapshot.val());\r\n      rx_all_users(response);\r\n      console.log(\"response\", response);\r\n\r\n      const me = response.filter((data) =>\r\n        data.uid.includes(fireauth.currentUser.uid)\r\n      );\r\n      rx_me(me);\r\n      login_maintain(me[0]);\r\n      console.log(\"me\", me);\r\n    });\r\n\r\n    firedatabase.ref(\"room\").on(\"value\", (snapshot) => {\r\n      if (snapshot.val() !== null) {\r\n        let response = Object.values(snapshot.val());\r\n        console.log(\"roomListBox\", response);\r\n        rx_allroomlist(response);\r\n\r\n        const found = response.filter((element) =>\r\n          element.uid.some((item) => item === fireauth.currentUser.uid)\r\n        );\r\n        rx_myroomlist(found);\r\n        console.log(\"found\", found);\r\n      }\r\n    });\r\n\r\n    firedatabase.ref(\"msg\").on(\"value\", (snapshot) => {\r\n      if (snapshot.val() !== null) {\r\n        let response = snapshot.val();\r\n        setMsg(response);\r\n      }\r\n    });\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n  console.log(\"all_users\", all_users);\r\n  console.log(\"focusroom\", focusroom);\r\n    useEffect(() => {\r\n        msgs && focusroom && rx_msglist( (msgs[focusroom] ? Object.values(msgs[focusroom]) : [] )  );\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [msgs, focusroom]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"md\" className={classes.root}>\r\n        <Paper className={classes.chat_wrap} elevation={1}>\r\n          <Grid container spacing={0}>\r\n            <Grid item xs={12} sm={4} className={classes.sectionDesktop}>\r\n              <FriendList\r\n                title=\"전체 친구 리스트\"\r\n                data={all_users}\r\n                event={handleFriend}\r\n              />\r\n              <Divider />\r\n              <FriendList\r\n                title=\"나의 방 리스트\"\r\n                data={myroomlist}\r\n                event={handleRoom}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={8} style={{ position: \"relative\" }}>\r\n              <Message />\r\n              <InputBox />\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  all_users: state.chats.all_users,\r\n  myroomlist: state.chats.myroomlist,\r\n  allroomlist: state.chats.allroomlist,\r\n  me: state.chats.me[0],\r\n  focusroom: state.chats.focusroom,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  rx_all_users: (val) => {\r\n    dispatch(rx_all_users(val));\r\n  },\r\n  rx_me: (val) => {\r\n    dispatch(rx_me(val));\r\n  },\r\n  rx_myroomlist: (val) => {\r\n    dispatch(rx_myroomlist(val));\r\n  },\r\n  rx_allroomlist: (val) => {\r\n    dispatch(rx_allroomlist(val));\r\n  },\r\n  rx_focusroom: (val) => {\r\n    dispatch(rx_focusroom(val));\r\n  },\r\n  rx_msglist: (val) => {\r\n    dispatch(rx_msglist(val));\r\n  },\r\n  rx_connected: (val) => {\r\n    dispatch(rx_connected(val));\r\n  },\r\n  login_maintain: (val) => {\r\n    dispatch(login_maintain(val));\r\n  }\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Chat);\r\n","import React, { useEffect } from \"react\";\r\nimport { HashRouter, Switch } from \"react-router-dom\";\r\nimport { fireauth } from \"./services/firebase\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { rx_authenticated } from \"./modules/chats\";\r\nimport { logout, connected } from \"./helpers/databox\";\r\n\r\nimport PublicRoute from \"./components/PublicRoute\";\r\nimport PrivateRoute from \"./components/PrivateRoute\";\r\nimport SignUp from \"./containers/SignUp\";\r\nimport Login from \"./containers/Login\";\r\nimport Chat from \"./containers/Chat\";\r\n\r\nfunction App({ rx_authenticated, authenticated }) {\r\n  useEffect(() => {\r\n    console.log(\"[표시]App.js\");\r\n    fireauth.onAuthStateChanged((user) => {\r\n      if (user) {\r\n        //로그인상태---\r\n        console.log(\"App/로그인\", user);\r\n        //#########################\r\n        connected(true);\r\n        rx_authenticated(true); //현재 로그인 여부 파악을 위한 값\r\n        //#########################\r\n      } else {\r\n        //로그아웃상태---\r\n        console.log(\"App/로그아웃\", user);\r\n        //#########################\r\n        connected(false);\r\n        rx_authenticated(false); //현재 로그인 여부 파악을 위한 값\r\n        //#########################\r\n      }\r\n    });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  return (\r\n    <HashRouter>\r\n      <Switch>\r\n        <PrivateRoute\r\n          path=\"/chat\"\r\n          authenticated={authenticated}\r\n          component={Chat}\r\n        />\r\n        <PublicRoute\r\n          path=\"/signup\"\r\n          authenticated={authenticated}\r\n          component={SignUp}\r\n        />\r\n        <PublicRoute\r\n          path={[\"/\", \"/login\"]}\r\n          authenticated={authenticated}\r\n          component={Login}\r\n        />\r\n      </Switch>\r\n      {authenticated &&\r\n        <button\r\n          onClick={() => {\r\n            // connectCheck(false);\r\n            logout();\r\n          }}\r\n        >\r\n          로그아웃\r\n        </button>\r\n      }\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  authenticated: state.chats.authenticated,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  rx_authenticated: (val) => {\r\n    dispatch(rx_authenticated(val));\r\n  },\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { combineReducers } from \"redux\";\r\nimport chats from \"./chats\";\r\n// import auth from \"./auth\";\r\n\r\nconst rootReducer = combineReducers({\r\n  chats,\r\n  // auth,\r\n});\r\n\r\nexport default rootReducer;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nimport rootReducer from \"./modules\";\r\nimport { createLogger } from \"redux-logger\";\r\n\r\nconst logger = createLogger();\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(logger))\r\n);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}