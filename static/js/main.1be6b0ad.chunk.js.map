{"version":3,"sources":["services/firebase.js","modules/chats.js","helpers/databox.js","components/PublicRoute.js","components/PrivateRoute.js","containers/SignUp.js","containers/Login.js","components/FriendItem.js","components/FriendList.js","components/FriendAdd.js","components/Message.js","components/InputBox.js","containers/Chat.js","App.js","reportWebVitals.js","modules/index.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","fireauth","auth","firedatabase","firestore","database","RX_AUTHENTICATED","RX_ALL_USERS","RX_ME","RX_CONNECTED","RX_MYROOMLIST","RX_ALLROOMLIST","RX_MSGLIST","RX_REMOVE","RX_FOCUSROOM","initialState","authenticated","all_users","me","all_connected","myroomlist","allroomlist","msglist","focusroom","chats","state","action","type","result","filter","todo","key","signUp","member","createUserWithEmailAndPassword","email","password","then","console","log","newPostKey","ref","push","postData","name","uid","currentUser","updates","update","catch","error","alert","message","signIn","signInWithEmailAndPassword","err","sendChat","msg","timestamp","PublicRoute","Component","component","rest","render","props","to","PrivateRoute","pathname","from","location","Copyright","Typography","variant","color","align","Button","Link","Date","getFullYear","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","form","width","submit","connect","classes","useState","setMember","handleOnChange","e","target","value","handleOnSubmit","a","preventDefault","Container","maxWidth","CssBaseline","className","Avatar","noValidate","onSubmit","Grid","container","item","xs","TextField","required","fullWidth","id","label","autoComplete","onChange","justifyContent","Box","mt","Login","autoFocus","StyledBadge","withStyles","badge","boxShadow","background","position","top","left","height","borderRadius","animation","border","content","transform","opacity","Badge","FriendItem","img","text","sub","msg_key","event","ListItem","button","onClick","ListItemAvatar","invisible","overlap","anchorOrigin","vertical","horizontal","alt","src","ListItemText","primary","root","list","overflowY","divider","title","data","uid_name","names","undefined","length","useEffect","ListSubheader","List","map","index","Array","isArray","emails","blue","SimpleDialog","onClose","selectedValue","open","Dialog","aria-labelledby","DialogTitle","once","snapshot","f_add","val","includes","React","setOpen","setSelectedValue","lBox","textAlign","rBox","appBar","bottom","listBox","listBoxItem","listBoxItemavatar","dispatch","rx_remove","style","paddingBottom","Fragment","wordBreak","room","remove","removeChats","InputBox","padding","setMsg","handleSumbit","now","displayName","endIcon","chat_wrap","rx_all_users","rx_me","rx_myroomlist","rx_allroomlist","rx_focusroom","rx_msglist","msgs","on","response","Object","values","found","element","some","Paper","elevation","sm","sectionDesktop","you","clone_data","sort","clone_allroomlist","JSON","parse","stringify","Divider","rx_authenticated","onAuthStateChanged","user","path","Chat","SignUp","set","connection","signOut","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","logger","createLogger","store","createStore","composeWithDevTools","applyMiddleware","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.1be6b0ad.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nimport \"firebase/database\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAtKM1gMUkzx8Al9G5Y6jozCsTTezqmo4M\",\n  authDomain: \"dongtalk-82851.firebaseapp.com\",\n  databaseURL: \"https://dongtalk-82851-default-rtdb.firebaseio.com\",\n  projectId: \"dongtalk-82851\",\n  storageBucket: \"dongtalk-82851.appspot.com\",\n  messagingSenderId: \"63820293757\",\n  appId: \"1:63820293757:web:1d2960afd6d6ddf589b314\",\n  measurementId: \"G-E7K9VBW4D0\",\n};\nfirebase.initializeApp(firebaseConfig);\n\nexport const fire = firebase;\nexport const fireauth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const firedatabase = firebase.database();\n\n//const provider = new firebase.auth.GoogleAuthProvider();\n// GoogleAuthProvider 클래스를 authentication 라이브러리에서 사용할 수 있도록 불러오는 코드.\n//provider.setCustomParameters({prompt: 'select_account'});\n// signIn이랑 authentication을 위해서 GoogleAuthProvider를 사용할 때마다 구글 팝업을 항상 띄우기를 원한다는 의미이다.\n//export const signInWithGoogle = () => auth.signInWithPopup(provider);\n// signInWithPopup 메소드는 여러 파라미터를 받을 수 있다. 트위터, 페이스북, 깃허브 등으로도 로그인이 필요할 수도 있으므로.\n// 여기에서는 google로 signIn할 것이기 때문에, 파라미터로 위에서 정의한 provider를 넣어준다.\n\n// export default firebase;\n// 혹시 전체 라이브러리가 필요할지도 모르기 때문에 firebase도 export 해준다.\n","const RX_AUTHENTICATED = \"menu/RX_AUTHENTICATED\";\nconst RX_ALL_USERS = \"menu/RX_ALL_USERS\";\nconst RX_ME = \"menu/RX_ME\";\nconst RX_CONNECTED = \"menu/RX_CONNECTED\";\nconst RX_MYROOMLIST = \"menu/RX_MYROOMLIST\";\nconst RX_ALLROOMLIST = \"menu/RX_ALLROOMLIST\";\nconst RX_MSGLIST = \"menu/RX_MSGLIST\";\nconst RX_REMOVE = \"menu/RX_REMOVE\";\nconst RX_FOCUSROOM = \"menu/RX_FOCUSROOM\";\n\nexport const rx_authenticated = (result) => ({\n  type: RX_AUTHENTICATED,\n  result,\n});\n\nexport const rx_all_users = (result) => ({\n  type: RX_ALL_USERS,\n  result,\n});\n\nexport const rx_me = (result) => ({\n  type: RX_ME,\n  result,\n});\n\nexport const rx_connected = (result) => ({\n  type: RX_CONNECTED,\n  result,\n});\n\nexport const rx_myroomlist = (result) => ({\n  type: RX_MYROOMLIST,\n  result,\n});\n\nexport const rx_allroomlist = (result) => ({\n  type: RX_ALLROOMLIST,\n  result,\n});\n\nexport const rx_msglist = (result) => ({\n  type: RX_MSGLIST,\n  result,\n});\n\nexport const rx_remove = (key) => ({\n  type: RX_REMOVE,\n  key,\n});\n\nexport const rx_focusroom = (result) => ({\n  type: RX_FOCUSROOM,\n  result,\n});\n\nconst initialState = {\n  authenticated: false,\n  all_users: [],\n  me: {},\n  all_connected: \"\",\n  myroomlist: [],\n  allroomlist: [],\n  msglist: [],\n  focusroom: \"\",\n};\n\nfunction chats(state = initialState, action) {\n  switch (action.type) {\n    case RX_AUTHENTICATED:\n      return {\n        ...state,\n        authenticated: action.result,\n      };\n    case RX_ALL_USERS:\n      return {\n        ...state,\n        all_users: action.result,\n      };\n    case RX_ME:\n      return {\n        ...state,\n        me: action.result,\n      };\n    case RX_CONNECTED:\n      return {\n        ...state,\n        all_connected: action.result,\n      };\n    case RX_MYROOMLIST:\n      return {\n        ...state,\n        myroomlist: action.result,\n      };\n    case RX_ALLROOMLIST:\n      return {\n        ...state,\n        // item.name.push(all_users.filter((data) => data.uid === item.uid))\n        allroomlist: action.result,\n      };\n    case RX_MSGLIST:\n      return {\n        ...state,\n        msglist: action.result,\n      };\n    case RX_REMOVE:\n      return {\n        ...state,\n        msglist: state.msglist.filter((todo) => todo.key !== action.key),\n      };\n    case RX_FOCUSROOM:\n      return {\n        ...state,\n        focusroom: action.result,\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default chats;\n","import { fireauth, firedatabase, fire } from \"../services/firebase\";\n\n//회원가입 함수\nexport function signUp(member) {\n  return fireauth\n    .createUserWithEmailAndPassword(member.email, member.password)\n    .then(() => {\n      console.log(\"signUp()가입성공\", member.email, member.password);\n      // 여기는 별도 회원 데이터 저장하기 위한 기능\n      var newPostKey = firedatabase.ref(\"all_users\").push().key;\n      var postData = {\n        email: member.email,\n        name: member.name,\n        password: member.password,\n        uid: fireauth.currentUser.uid,\n        key: newPostKey,\n      };\n      var updates = {};\n      updates[\"/all_users/\" + newPostKey] = postData;\n      return firedatabase.ref().update(updates);\n      // //여기는 별도 회원 데이터 저장하기 위한 기능\n    })\n    .catch((error) => {\n      alert(\n        error.message ===\n          \"The email address is already in use by another account.\" &&\n          \"이미 있는 아이디입니다.\"\n      );\n    });\n}\n\n//이메일 로그인 함수\nexport function signIn(member) {\n  return fireauth\n    .signInWithEmailAndPassword(member.email, member.password)\n    .then(() => {\n      //dispatch({ type: \"LOGIN_SUCCESS\" });\n      console.log(\"signIn()로그인성공\");\n    })\n    .catch((err) => {\n      //dispatch({ type: \"LOGIN_ERROR\", err });\n      console.log(\"signIn()실패\");\n    });\n}\n\n//로그아웃\nexport function logout() {\n  firedatabase.ref(`UsersConnection/${fireauth.currentUser.uid}`).set({\n    connection: false,\n    uid: fireauth.currentUser.uid,\n  });\n  return fireauth\n    .signOut()\n    .then(() => {\n      // Sign-out successful.\n      console.log(\"로그아웃 성공\");\n    })\n    .catch((error) => {\n      // An error happened.\n      console.log(\"로그아웃 실패\");\n    });\n}\n\n//##### 메시지 보내기 #####\nexport function sendChat(msg, focusroom) {\n  if (focusroom !== \"\") {\n    var newPostKey = firedatabase.ref(`msg/${focusroom}`).push().key;\n\n    var postData = {\n      message: msg.message,\n      timestamp: msg.timestamp,\n      uid: msg.uid,\n      key: newPostKey,\n      name: msg.name,\n    };\n\n    var updates = {};\n    updates[`msg/${focusroom}/${newPostKey}`] = postData;\n    return firedatabase.ref().update(updates);\n  } else {\n    alert(\"방을 선택해주세요\");\n  }\n} //sendChat\n\n//##### 메시지 삭제 #####\nexport const removeChats = (room, key, rx_remove) => {\n  firedatabase.ref(`msg/${room}/${key}`).remove();\n  rx_remove(key);\n  console.log(\"메롱\", room, key);\n}; //removeChats\n\n// export function roomPush(all_users, me, you, rx_focusroom, rx_msglist) {\n//   var newPostKey = firedatabase.ref(\"room\").push().key;\n//   rx_focusroom(newPostKey);\n//   getMsg(newPostKey, rx_msglist);\n//   var postData = {\n//     user_uid: [me, you],\n//     name: [\n//       nameFilter(all_users, me)[0].name,\n//       nameFilter(all_users, you)[0].name,\n//     ],\n//     msg_key: newPostKey,\n//   };\n\n//   var updates = {};\n//   updates[\"/room/\" + newPostKey] = postData;\n//   return firedatabase.ref().update(updates);\n// }\n\n// export function roomOpen() {\n//   firedatabase\n//     .ref(\"room\")\n//     .once(\"value\")\n//     .then((snapshot) => {\n//       if (snapshot.val() === null) {\n//         console.log(\"room에 데이터가 null인경우\");\n//         //roomPush(all_users, me, you, rx_focusroom, rx_msglist);\n//       } else if (me === you) {\n//         console.log(\"me === you 즉 내가 나를 클릭한경우\");\n//         let response = Object.values(snapshot.val());\n//         const found = response.filter(\n//           (element) => element.user_uid[0] === me && element.user_uid[1] === you\n//         );\n//         found.length === 0 &&\n//           //roomPush(all_users, me, you, rx_focusroom, rx_msglist); //동일한 방 열리는거 방지용\n//       } else {\n//         console.log(\"방생성\");\n\n//         console.log(\"once1\", snapshot.val());\n//         console.log(\"once2\", Object.values(snapshot.val()));\n\n//         function findMe(element) {\n//           if (element === me) {\n//             return true;\n//           }\n//         }\n//         function findYou(element) {\n//           if (element === you) {\n//             return true;\n//           }\n//         }\n\n//         let response = Object.values(snapshot.val());\n\n//         const found = response\n//           .filter((element) => element.user_uid.some(findMe))\n//           .filter((element) => element.user_uid.some(findYou));\n//         found.length === 0 &&\n//           roomPush(all_users, me, you, rx_focusroom, rx_msglist);\n//       }\n//     }); //firedatabase\n// };\n\n// export function roomCheck(all_users, me, you, rx_focusroom, rx_msglist) {\n//   console.log(\"all_users\", all_users);\n//   console.log(\"me\", me);\n//   console.log(\"you\", you);\n\n//   firedatabase\n//     .ref(\"room\")\n//     .once(\"value\")\n//     .then((snapshot) => {\n//       if (snapshot.val() === null) {\n//         console.log(\"room에 데이터가 null인경우\");\n//         //roomPush(all_users, me, you, rx_focusroom, rx_msglist);\n//       } else if (me === you) {\n//         console.log(\"me === you 즉 내가 나를 클릭한경우\");\n//         let response = Object.values(snapshot.val());\n//         const found = response.filter(\n//           (element) => element.user_uid[0] === me && element.user_uid[1] === you\n//         );\n//         found.length === 0 &&\n//           //roomPush(all_users, me, you, rx_focusroom, rx_msglist); //동일한 방 열리는거 방지용\n//       } else {\n//         console.log(\"방생성\");\n\n//         console.log(\"once1\", snapshot.val());\n//         console.log(\"once2\", Object.values(snapshot.val()));\n\n//         function findMe(element) {\n//           if (element === me) {\n//             return true;\n//           }\n//         }\n//         function findYou(element) {\n//           if (element === you) {\n//             return true;\n//           }\n//         }\n\n//         let response = Object.values(snapshot.val());\n\n//         const found = response\n//           .filter((element) => element.user_uid.some(findMe))\n//           .filter((element) => element.user_uid.some(findYou));\n//         found.length === 0 &&\n//           roomPush(all_users, me, you, rx_focusroom, rx_msglist);\n//       }\n//     }); //firedatabase\n// } //roomCheck\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nfunction PublicRoute({ component: Component, authenticated, ...rest }) {\n  return (\n    <Route\n      {...rest}\n      render={(props) =>\n        authenticated === false ? (\n          <Component {...props} />\n        ) : (\n          <Redirect to=\"/chat\" />\n        )\n      }\n    />\n  );\n}\n\nexport default PublicRoute;","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nfunction PrivateRoute({ component: Component, authenticated, ...rest }) {\n  return (\n    <Route\n      {...rest}\n      render={(props) =>\n        authenticated === true ? (\n          <Component {...props} />\n        ) : (\n          <Redirect\n            to={{ pathname: \"/login\", state: { from: props.location } }}\n          />\n        )\n      }\n    />\n  );\n}\n\nexport default PrivateRoute;","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { signUp } from \"../helpers/databox\";\n// import { signUp, all_users } from \"../helpers/databox\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport {\n  Avatar,\n  Button,\n  CssBaseline,\n  TextField,\n  Grid,\n  Box,\n  Typography,\n  Container,\n} from \"@material-ui/core\";\nimport { connect } from \"react-redux\";\n\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {\"Copyright © \"}\n      <Button component={Link} to=\"https://material-ui.com/\">\n        Your Website\n      </Button>{\" \"}\n      {new Date().getFullYear()}\n      {\".\"}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nfunction SignUp({ me }) {\n  const classes = useStyles();\n  const [member, setMember] = useState({\n    email: \"\",\n    name: \"\",\n    password: \"\",\n  });\n\n  const handleOnChange = (e) => {\n    const { name, value } = e.target;\n    setMember({ ...member, [name]: value });\n  };\n\n  const handleOnSubmit = async (e) => {\n    e.preventDefault();\n    if (member.email !== \"\" && member.password !== \"\" && member.name !== \"\") {\n      //connectCheck(me, false);\n      signUp(member);\n\n      // signUp(member, all_users);\n    }\n  };\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          회원 가입\n        </Typography>\n        <form className={classes.form} noValidate onSubmit={handleOnSubmit}>\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"email\"\n                label=\"Email Address\"\n                name=\"email\"\n                autoComplete=\"email\"\n                value={member.email}\n                onChange={handleOnChange}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"name\"\n                label=\"name\"\n                name=\"name\"\n                autoComplete=\"name\"\n                value={member.name}\n                onChange={handleOnChange}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"password\"\n                label=\"Password\"\n                type=\"password\"\n                id=\"password\"\n                autoComplete=\"current-password\"\n                value={member.password}\n                onChange={handleOnChange}\n              />\n            </Grid>\n          </Grid>\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n          >\n            가입하기\n          </Button>\n          <Grid container justifyContent=\"flex-end\">\n            <Grid item>\n              이미 회원이신가?{\" \"}\n              <Button component={Link} to=\"/login\">\n                로그인\n              </Button>\n            </Grid>\n          </Grid>\n        </form>\n      </div>\n      <Box mt={5}>\n        <Copyright />\n      </Box>\n    </Container>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  authenticated: state.chats.authenticated,\n});\n\nexport default connect(mapStateToProps, null)(SignUp);\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { signIn } from \"../helpers/databox\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\n\nimport {\n  Avatar,\n  Button,\n  TextField,\n  Grid,\n  Box,\n  Typography,\n  CssBaseline,\n  Container,\n} from \"@material-ui/core\";\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {\"Copyright © \"}\n      <Button component={Link} to=\"https://material-ui.com/\">\n        Your Website\n      </Button>{\" \"}\n      {new Date().getFullYear()}\n      {\".\"}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nfunction Login({ me }) {\n  const classes = useStyles();\n  const [member, setMember] = useState({\n    email: \"\",\n    password: \"\",\n  });\n\n  const handleOnChange = (e) => {\n    const { name, value } = e.target;\n    setMember({ ...member, [name]: value });\n  };\n\n  const handleOnSubmit = async (e) => {\n    e.preventDefault();\n    if (member.email !== \"\" && member.password !== \"\") {\n      signIn(member);\n    }\n  };\n\n  // const handleGoogleSignIn = async () => {\n  //   try {\n  //     await signInWithGoogle();\n  //   } catch (error) {\n  //     console.log(error);\n  //   }\n  // };\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          로그인\n        </Typography>\n        <form className={classes.form} onSubmit={handleOnSubmit} noValidate>\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"email\"\n            label=\"이메일을 입력하세요.\"\n            name=\"email\"\n            autoComplete=\"email\"\n            autoFocus\n            value={member.email}\n            onChange={handleOnChange}\n          />\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"password\"\n            label=\"Password\"\n            type=\"password\"\n            id=\"password\"\n            autoComplete=\"current-password\"\n            value={member.password}\n            onChange={handleOnChange}\n          />\n\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n          >\n            Sign In\n          </Button>\n          {/* <Button\n            type=\"button\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={handleGoogleSignIn}\n            className={classes.submit}\n          >\n            구글 로그인\n          </Button> */}\n          <Grid container>\n            <Grid item xs>\n              {/* <Link href=\"#\" variant=\"body2\">\n                Forgot password?\n              </Link> */}\n            </Grid>\n            <Grid item>\n              <Button component={Link} to=\"/signup\">\n                {\"회원가입\"}\n              </Button>\n            </Grid>\n          </Grid>\n        </form>\n      </div>\n      <Box mt={8}>\n        <Copyright />\n      </Box>\n    </Container>\n  );\n}\n\nexport default Login;\n","import React from 'react';\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\n\r\nimport {\r\n    ListItem,\r\n    ListItemText,\r\n    ListItemAvatar,\r\n    Avatar,\r\n} from '@material-ui/core';\r\n\r\nconst StyledBadge = withStyles((theme) => ({\r\n  badge: {\r\n    backgroundColor: \"#44b700\",\r\n    color: \"#44b700\",\r\n    boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\r\n    \"&::after\": {\r\n      position: \"absolute\",\r\n      top: 0,\r\n      left: 0,\r\n      width: \"100%\",\r\n      height: \"100%\",\r\n      borderRadius: \"50%\",\r\n      animation: \"$ripple 1.2s infinite ease-in-out\",\r\n      border: \"1px solid currentColor\",\r\n      content: '\"\"',\r\n    },\r\n  },\r\n  \"@keyframes ripple\": {\r\n    \"0%\": {\r\n      transform: \"scale(.8)\",\r\n      opacity: 1,\r\n    },\r\n    \"100%\": {\r\n      transform: \"scale(2.4)\",\r\n      opacity: 0,\r\n    },\r\n  },\r\n}))(Badge);\r\n\r\nconst FriendItem = ({ img,text,sub,uid,msg_key,event }) => {\r\n    return (\r\n            <ListItem\r\n        button\r\n        onClick={()=> msg_key ? event(msg_key) : event(uid) }\r\n            >\r\n              <ListItemAvatar>\r\n                <StyledBadge\r\n                  invisible={!true}\r\n                  overlap=\"circular\"\r\n                  anchorOrigin={{\r\n                    vertical: \"bottom\",\r\n                    horizontal: \"right\",\r\n                  }}\r\n                  variant=\"dot\"\r\n                >\r\n                  <Avatar\r\n                        alt=\"Remy Sharp\"\r\n                        src={ img }\r\n                  />\r\n                </StyledBadge>\r\n\r\n                {/* <Avatar>\r\n                  <BeachAccessIcon />\r\n                </Avatar> */}\r\n              </ListItemAvatar>\r\n            <ListItemText primary={text} secondary={ sub } />\r\n            </ListItem>\r\n    );\r\n};\r\n\r\nexport default FriendItem;","import React, { useEffect } from \"react\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport { connect } from \"react-redux\";\r\n\r\nimport FriendItem from './FriendItem';\r\n\r\nimport { Box,List } from '@material-ui/core';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n\r\n  },\r\n  list: {\r\n    height: '240px',\r\n    overflowY: 'scroll'\r\n  },\r\n  divider: {\r\n   // margin: '20px 0',\r\n  }\r\n}));\r\n\r\n\r\n\r\n\r\nconst FriendList = ({ title, data, event, all_users }) => {\r\n  const classes = useStyles();\r\n  \r\n    function uid_name(names) {\r\n      return (names !== undefined) && (all_users.length > 0 && all_users.filter(data => data.uid === names)[0].name);\r\n    }\r\n\r\n    useEffect(() => {\r\n    console.log(\"[표시]FriendList.js\");\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n    return (\r\n      <Box className={classes.root}>\r\n        <ListSubheader>{title}</ListSubheader>\r\n        \r\n          <List className={classes.list}>\r\n            {data.length > 0 ? (\r\n              data.map((data, index) => (\r\n                <FriendItem\r\n                  key={index}\r\n                  img=\"https://material-ui.com/static/images/avatar/1.jpg\"\r\n                  text={Array.isArray(data.uid) ? data.uid.map((item,index) => index > 0 ? `/${uid_name(item)}` : uid_name(item)) : uid_name(data.uid) }\r\n                  sub={data.email === undefined ? '1:1 대화방' : data.email}\r\n                  uid={data.uid}\r\n                  msg_key={data.msg_key}\r\n                  event={event}\r\n                />\r\n              ))\r\n            ) : (\r\n                <li>리스트가없습니다.</li>\r\n            )}  \r\n          </List>\r\n\r\n          {/* <List className={classes.list}>\r\n            <FriendItem img=\"https://material-ui.com/static/images/avatar/1.jpg\" text=\"김동현\" sub=\"dongdong@stunitas.com\" />\r\n            <FriendItem img=\"https://material-ui.com/static/images/avatar/1.jpg\" text=\"김동현\" sub=\"dongdong@stunitas.com\" />\r\n            <FriendItem img=\"https://material-ui.com/static/images/avatar/1.jpg\" text=\"김동현\" sub=\"dongdong@stunitas.com\" />\r\n            <FriendItem img=\"https://material-ui.com/static/images/avatar/1.jpg\" text=\"김동현\" sub=\"dongdong@stunitas.com\" />\r\n          </List>\r\n          \r\n          <Divider className={classes.divider} />\r\n          <ListSubheader>나의 방 리스트</ListSubheader>\r\n          <List className={classes.list}>\r\n            <FriendItem img=\"https://material-ui.com/static/images/avatar/1.jpg\" text=\"김동현/박금주\" sub=\"1:1 대화방\" />\r\n            <FriendItem img=\"https://material-ui.com/static/images/avatar/1.jpg\" text=\"김동현/박금주\" sub=\"1:1 대화방\" />\r\n            <FriendItem img=\"https://material-ui.com/static/images/avatar/1.jpg\" text=\"김동현/박금주\" sub=\"1:1 대화방\" />\r\n            <FriendItem img=\"https://material-ui.com/static/images/avatar/1.jpg\" text=\"김동현/박금주\" sub=\"1:1 대화방\" />\r\n          </List> */}\r\n\r\n        </Box>\r\n    );\r\n};\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n  all_users: state.chats.all_users,\r\n});\r\n\r\n// const mapDispatchToProps = (dispatch) => ({\r\n//   rx_all_users: (val) => {\r\n//     dispatch(rx_all_users(val));\r\n//   },\r\n//   rx_me: (val) => {\r\n//     dispatch(rx_me(val));\r\n//   },\r\n//   rx_myroomlist: (val) => {\r\n//     dispatch(rx_myroomlist(val));\r\n//   },\r\n//   rx_allroomlist: (val) => {\r\n//     dispatch(rx_allroomlist(val));\r\n//   },\r\n// });\r\n\r\nexport default connect(mapStateToProps, null)(FriendList);","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { fireauth, firedatabase } from \"../services/firebase\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport PersonIcon from \"@material-ui/icons/Person\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { connect } from \"react-redux\";\n\nimport { blue } from \"@material-ui/core/colors\";\n\nconst emails = [\"username@gmail.com\", \"user02@gmail.com\"];\nconst useStyles = makeStyles({\n  avatar: {\n    backgroundColor: blue[100],\n    color: blue[600],\n  },\n});\n\nfunction SimpleDialog(props) {\n  const classes = useStyles();\n  const { onClose, selectedValue, open, data, focusroom } = props;\n\n  const handleClose = () => {\n    onClose(selectedValue);\n    console.log(\"까르르르궁\", data);\n  };\n\n  const handleListItemClick = (uid) => {\n    firedatabase.ref(`room/${focusroom}/uid`).once('value').then((snapshot) => {\n      const f_add = snapshot.val();\n  \n      if (!f_add.includes(uid)) {\n        //중복 친구가 없는경우 추가\n        f_add.push(uid);\n        firedatabase.ref(`room/${focusroom}`)\n          .update({\n            uid:f_add\n          })\n          .then(() => {\n            console.log('친추 완료', f_add);\n          })\n          .catch((error) => {\n            console.log('친추 실패');\n          });\n      } else {\n        //중복 친구가 있는경우 알럿 노출\n        alert('이미 추가된 친구입니다.');\n      };\n    });\n    onClose(false);\n  };\n  \n  console.log(\"까르르르궁\", data);\n  return (\n    <Dialog\n      onClose={handleClose}\n      aria-labelledby=\"simple-dialog-title\"\n      open={open}\n    >\n      <DialogTitle id=\"simple-dialog-title\">Set backup account</DialogTitle>\n      <List>\n        {data.length > 0 ? (\n          data.map((item, index) => (\n            <ListItem\n              button\n              onClick={() => handleListItemClick(item.uid)}\n              key={index}\n            >\n              <ListItemAvatar>\n                <Avatar className={classes.avatar}>\n                  <PersonIcon />\n                </Avatar>\n              </ListItemAvatar>\n              <ListItemText primary={item.email} />\n            </ListItem>\n          ))\n        ) : (\n          <li>리스트가없습니다.</li>\n        )}\n      </List>\n    </Dialog>\n  );\n}\n\n// SimpleDialog.propTypes = {\n//   onClose: PropTypes.func.isRequired,\n//   open: PropTypes.bool.isRequired,\n//   selectedValue: PropTypes.string.isRequired,\n// };\n\nconst FriendAdd = ({ all_users,focusroom }) => {\n  const [open, setOpen] = React.useState(false);\n  const [selectedValue, setSelectedValue] = React.useState(emails[1]);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (value) => {\n    setOpen(false);\n    setSelectedValue(value);\n  };\n\n  return (\n    <>\n      <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\n        친구추가\n      </Button>\n      <SimpleDialog\n        data={all_users}\n        focusroom={focusroom}\n        selectedValue={selectedValue}\n        open={open}\n        onClose={handleClose}\n      />\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  all_users: state.chats.all_users,\n  // myroomlist: state.chats.myroomlist,\n  // allroomlist: state.chats.allroomlist,\n  // me: state.chats.me[0],\n  focusroom: state.chats.focusroom,\n});\n\n//   const mapDispatchToProps = (dispatch) => ({\n//     rx_all_users: (val) => {\n//       dispatch(rx_all_users(val));\n//     },\n//     rx_me: (val) => {\n//       dispatch(rx_me(val));\n//     },\n//     rx_myroomlist: (val) => {\n//       dispatch(rx_myroomlist(val));\n//     },\n//     rx_allroomlist: (val) => {\n//       dispatch(rx_allroomlist(val));\n//     },\n//     rx_focusroom: (val) => {\n//       dispatch(rx_focusroom(val));\n//     },\n//     rx_msglist: (val) => {\n//       dispatch(rx_msglist(val));\n//     },\n//   });\n\nexport default connect(mapStateToProps, null)(FriendAdd);\n","import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n// import { fireauth, firedatabase } from \"../services/firebase\";\r\nimport { rx_remove } from \"../modules/chats\";\r\n\r\nimport { removeChats } from \"../helpers/databox\";\r\nimport ListSubheader from \"@material-ui/core/ListSubheader\";\r\n\r\nimport {\r\n  Box,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemAvatar,\r\n  Avatar,\r\n  Typography,\r\n  Button,\r\n} from \"@material-ui/core\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport FriendAdd from \"./FriendAdd\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  lBox: {\r\n    flexDirection: \"row-reverse\",\r\n    display: \"flex\",\r\n    textAlign: \"right\",\r\n  },\r\n  rBox: {\r\n    flexDirection: \"row-reverse\",\r\n    display: \"flex\",\r\n    textAlign: \"right\",\r\n  },\r\n  appBar: {\r\n    top: \"auto\",\r\n    bottom: 0,\r\n    left: 0,\r\n    width: \"100%\",\r\n    \"& input,& button\": {\r\n      width: \"100%\",\r\n      height: \"50px\",\r\n    },\r\n  },\r\n\r\n  listBox: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n  listBoxItem: {},\r\n  listBoxItemavatar: {\r\n    display: \"flex\",\r\n  },\r\n}));\r\n\r\nconst Message = ({ focusroom, rx_remove, msglist }) => {\r\n  const classes = useStyles();\r\n  console.log(\"Message-focusroom\", focusroom);\r\n\r\n  useEffect(() => {\r\n    console.log(\"[표시]Message.js\");\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [msglist, focusroom]);\r\n\r\n  return (\r\n    <Box style={{ height: \"577px\", overflowY: \"scroll\", paddingBottom: \"15%\" }}>\r\n      <ListSubheader>\r\n        하하하\r\n        {focusroom !== \"\" &&\r\n          <FriendAdd />\r\n        }\r\n      </ListSubheader>\r\n      <List className={classes.listBox}>\r\n        {msglist.length > 0 ? (\r\n          msglist.map((data, index) => (\r\n            <ListItem key={index} className={classes.listBoxItem}>\r\n              <ListItemAvatar\r\n                className={classes.listBoxItemavatar}\r\n                style={{\r\n                  justifyContent: false ? \"flex-end\" : \"flex-start\",\r\n                }}\r\n              >\r\n                <Avatar alt=\"Remy Sharp\" src=\"/static/images/avatar/1.jpg\" />\r\n              </ListItemAvatar>\r\n\r\n              <ListItemText\r\n                primary={data.name}\r\n                secondary={\r\n                  <React.Fragment>\r\n                    <Typography\r\n                      component=\"span\"\r\n                      variant=\"body2\"\r\n                      color=\"textPrimary\"\r\n                      style={{ wordBreak: \"break-all\" }}\r\n                    >\r\n                      {data.message}\r\n                    </Typography>\r\n                    <br />\r\n                    {data.timestamp}\r\n                  </React.Fragment>\r\n                }\r\n              />\r\n              <Button\r\n                style={{\r\n                  display: false ? \"none\" : \"inline-flex\",\r\n                }}\r\n                onClick={() => removeChats(focusroom, data.key, rx_remove)}\r\n              >\r\n                삭제\r\n              </Button>\r\n            </ListItem>\r\n          ))\r\n        ) : (\r\n          <li>리스트가없습니다.</li>\r\n        )}\r\n      </List>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  focusroom: state.chats.focusroom,\r\n  msglist: state.chats.msglist,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  rx_remove: (val) => {\r\n    dispatch(rx_remove(val));\r\n  },\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Message);\r\n","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { fireauth } from \"../services/firebase\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Box, Button } from \"@material-ui/core\";\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport { sendChat } from \"../helpers/databox\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  InputBox: {\r\n    display: \"flex\",\r\n    backgroundColor: \"#fff\",\r\n    position: \"absolute\",\r\n    bottom: \"0\",\r\n    width: \"93%\",\r\n    margin: \"2%\",\r\n    padding: \"2%\",\r\n    boxShadow: \"1px 1px 5px #a0a0a0\",\r\n    borderRadius: \"5px\",\r\n    justifyContent: \"space-between\",\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nconst InputBox = ({ focusroom, me }) => {\r\n  const classes = useStyles();\r\n\r\n  const [msg, setMsg] = useState(\"\");\r\n\r\n  const handleOnChange = (e) => {\r\n    setMsg(e.target.value);\r\n  };\r\n\r\n  const handleSumbit = async (e) => {\r\n    e.preventDefault();\r\n    setMsg(\"\");\r\n    sendChat(\r\n      {\r\n        message: msg,\r\n        timestamp: Date.now(),\r\n        uid: fireauth.currentUser.uid,\r\n        name:\r\n          fireauth.currentUser.displayName === null\r\n            ? me.name\r\n            : fireauth.currentUser.displayName,\r\n      },\r\n      focusroom\r\n    );\r\n\r\n    console.log(      {\r\n        message: msg,\r\n        timestamp: Date.now(),\r\n        uid: fireauth.currentUser.uid,\r\n        name:\r\n          fireauth.currentUser.displayName === null\r\n            ? me.name\r\n            : fireauth.currentUser.displayName,\r\n      },\r\n      focusroom);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSumbit}>\r\n      <Box className={classes.InputBox}>\r\n        <TextField\r\n          id=\"outlined-basic\"\r\n          label=\"메시지\"\r\n          value={msg}\r\n          onChange={handleOnChange}\r\n          style={{ width: \"100%\" }}\r\n        />\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          type=\"submit\"\r\n          className={classes.button}\r\n          endIcon={<SendIcon />}\r\n        >\r\n          Send\r\n        </Button>\r\n      </Box>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  focusroom: state.chats.focusroom,\r\n  me: state.chats.me[0],\r\n});\r\n\r\n// const mapDispatchToProps = (dispatch) => ({\r\n//   rx_msglist: (val) => {\r\n//     dispatch(rx_msglist(val));\r\n//   },\r\n// });\r\n\r\nexport default connect(mapStateToProps, null)(InputBox);","import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { fireauth, firedatabase } from \"../services/firebase\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  rx_all_users,\r\n  rx_me,\r\n  rx_myroomlist,\r\n  rx_allroomlist,\r\n  rx_focusroom,\r\n  rx_msglist,\r\n} from \"../modules/chats\";\r\n\r\nimport {\r\n  CssBaseline,\r\n  Grid,\r\n  Container,\r\n  Paper,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\n\r\nimport FriendList from \"../components/FriendList\";\r\nimport Message from \"../components/Message\";\r\nimport InputBox from \"../components/InputBox\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    //height:'450px'\r\n  },\r\n  chat_wrap: {\r\n    width: \"100%\",\r\n    backgroundColor: theme.palette.background.paper,\r\n    height: \"577px\",\r\n  },\r\n}));\r\n\r\nconst Chat = ({\r\n  rx_all_users,\r\n  all_users,\r\n  rx_me,\r\n  me,\r\n  rx_myroomlist,\r\n  myroomlist,\r\n  rx_allroomlist,\r\n  allroomlist,\r\n  rx_focusroom,\r\n  focusroom,\r\n  rx_msglist,\r\n}) => {\r\n  const classes = useStyles();\r\n  const [msgs, setMsg] = useState([]);\r\n\r\n  const handleFriend = (you) => {\r\n    const data = [me.uid, you];\r\n    const clone_data = [me.uid, you].sort();\r\n    console.log(\"handleFriend\", data[0], data[1]);\r\n\r\n    console.log(allroomlist);\r\n    let clone_allroomlist = JSON.parse(JSON.stringify(allroomlist));\r\n    clone_allroomlist = clone_allroomlist.some(\r\n      (element) =>\r\n        JSON.stringify(element.uid.sort()) === JSON.stringify(clone_data)\r\n    );\r\n\r\n    if (!clone_allroomlist) {\r\n      var newPostKey = firedatabase.ref(\"room\").push().key;\r\n      var postData = {\r\n        uid: [me.uid, you],\r\n        name: [],\r\n        msg_key: newPostKey,\r\n      };\r\n      var updates = {};\r\n      updates[\"/room/\" + newPostKey] = postData;\r\n      return firedatabase.ref().update(updates);\r\n    } else {\r\n      alert(\"이미 방이 존재합니다.\");\r\n    }\r\n  };\r\n\r\n  const handleRoom = (msg_key) => {\r\n    rx_focusroom(msg_key);\r\n    //roomCheck(all_users, me, you, rx_focusroom, rx_msglist);\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(\"[표시]Chat.js\");\r\n\r\n    firedatabase.ref(\"all_users\").on(\"value\", (snapshot) => {\r\n      let response = Object.values(snapshot.val());\r\n      rx_all_users(response);\r\n      console.log(\"response\", response);\r\n\r\n      const me = response.filter((data) =>\r\n        data.uid.includes(fireauth.currentUser.uid)\r\n      );\r\n      rx_me(me);\r\n      console.log(\"me\", me);\r\n    });\r\n\r\n    firedatabase.ref(\"room\").on(\"value\", (snapshot) => {\r\n      if (snapshot.val() !== null) {\r\n        let response = Object.values(snapshot.val());\r\n        console.log(\"roomListBox\", response);\r\n        rx_allroomlist(response);\r\n\r\n        const found = response.filter((element) =>\r\n          element.uid.some((item) => item === fireauth.currentUser.uid)\r\n        );\r\n        rx_myroomlist(found);\r\n        console.log(\"found\", found);\r\n      }\r\n    });\r\n\r\n    firedatabase.ref(\"msg\").on(\"value\", (snapshot) => {\r\n      if (snapshot.val() !== null) {\r\n        let response = snapshot.val();\r\n        setMsg(response);\r\n      }\r\n    });\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n  console.log(\"all_users\", all_users);\r\n  console.log(\"focusroom\", focusroom);\r\n    useEffect(() => {\r\n        msgs && focusroom && rx_msglist( (msgs[focusroom] ? Object.values(msgs[focusroom]) : [] )  );\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [msgs, focusroom]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"md\" className={classes.root}>\r\n        <Paper className={classes.chat_wrap} elevation={1}>\r\n          <Grid container spacing={0}>\r\n            <Grid item xs={12} sm={4} className={classes.sectionDesktop}>\r\n              <FriendList\r\n                title=\"전체 친구 리스트\"\r\n                data={all_users}\r\n                event={handleFriend}\r\n              />\r\n              <Divider />\r\n              <FriendList\r\n                title=\"나의 방 리스트\"\r\n                data={myroomlist}\r\n                event={handleRoom}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={8} style={{ position: \"relative\" }}>\r\n              <Message />\r\n              <InputBox />\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  all_users: state.chats.all_users,\r\n  myroomlist: state.chats.myroomlist,\r\n  allroomlist: state.chats.allroomlist,\r\n  me: state.chats.me[0],\r\n  focusroom: state.chats.focusroom,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  rx_all_users: (val) => {\r\n    dispatch(rx_all_users(val));\r\n  },\r\n  rx_me: (val) => {\r\n    dispatch(rx_me(val));\r\n  },\r\n  rx_myroomlist: (val) => {\r\n    dispatch(rx_myroomlist(val));\r\n  },\r\n  rx_allroomlist: (val) => {\r\n    dispatch(rx_allroomlist(val));\r\n  },\r\n  rx_focusroom: (val) => {\r\n    dispatch(rx_focusroom(val));\r\n  },\r\n  rx_msglist: (val) => {\r\n    dispatch(rx_msglist(val));\r\n  },\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Chat);\r\n","import React, { useEffect } from \"react\";\nimport { HashRouter, Switch } from \"react-router-dom\";\nimport { fireauth } from \"./services/firebase\";\n\nimport { connect } from \"react-redux\";\nimport { rx_authenticated } from \"./modules/chats\";\nimport { logout } from \"./helpers/databox\";\n\nimport PublicRoute from \"./components/PublicRoute\";\nimport PrivateRoute from \"./components/PrivateRoute\";\nimport SignUp from \"./containers/SignUp\";\nimport Login from \"./containers/Login\";\nimport Chat from \"./containers/Chat\";\n\nfunction App({ rx_authenticated, authenticated }) {\n  useEffect(() => {\n    console.log(\"[표시]App.js\");\n    fireauth.onAuthStateChanged((user) => {\n      if (user) {\n        //로그인상태---\n        console.log(\"App/로그인\", user);\n        //#########################\n        rx_authenticated(true); //현재 로그인 여부 파악을 위한 값\n        //#########################\n      } else {\n        //로그아웃상태---\n        console.log(\"App/로그아웃\", user);\n        //#########################\n        rx_authenticated(false); //현재 로그인 여부 파악을 위한 값\n        //#########################\n      }\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <HashRouter>\n      <Switch>\n        <PrivateRoute\n          path=\"/chat\"\n          authenticated={authenticated}\n          component={Chat}\n        />\n        <PublicRoute\n          path=\"/signup\"\n          authenticated={authenticated}\n          component={SignUp}\n        />\n        <PublicRoute\n          path={[\"/\", \"/login\"]}\n          authenticated={authenticated}\n          component={Login}\n        />\n      </Switch>\n      {authenticated &&\n        <button\n          onClick={() => {\n            // connectCheck(false);\n            logout();\n          }}\n        >\n          로그아웃\n        </button>\n      }\n    </HashRouter>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  authenticated: state.chats.authenticated,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  rx_authenticated: (val) => {\n    dispatch(rx_authenticated(val));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from \"redux\";\nimport chats from \"./chats\";\n// import auth from \"./auth\";\n\nconst rootReducer = combineReducers({\n  chats,\n  // auth,\n});\n\nexport default rootReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport rootReducer from \"./modules\";\nimport { createLogger } from \"redux-logger\";\n\nconst logger = createLogger();\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(logger))\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}